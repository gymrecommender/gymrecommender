// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using backend.Enums;
using backend.Models;

#nullable disable

namespace backend.Migrations
{
    [DbContext(typeof(GymrecommenderContext))]
    partial class GymrecommenderContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "account_type", "account_type", new[] { "user", "gym", "admin" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "not_type", "notification_type", new[] { "message", "alert", "reminder" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "own_decision", "ownership_decision", new[] { "approved", "rejected" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "provider_type", "provider_type", new[] { "local", "google" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "rec_type", "recommendation_type", new[] { "main", "alternative" });
            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "uuid-ossp");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("backend.Models.Account", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("first_name");

                    b.Property<bool>("IsEmailVerified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_email_verified");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("last_name");

                    b.Property<DateTime?>("LastSignIn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_sign_in");

                    b.Property<string>("OuterUid")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("outer_uid");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("character(60)")
                        .HasColumnName("password_hash")
                        .IsFixedLength();

                    b.Property<ProviderType>("Provider")
                        .HasColumnType("provider_type")
                        .HasColumnName("provider");

                    b.Property<AccountType>("Type")
                        .HasColumnType("account_type")
                        .HasColumnName("type");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("username");

                    b.HasKey("Id")
                        .HasName("account_pkey");

                    b.HasIndex("CreatedBy");

                    b.HasIndex(new[] { "Email" }, "account_email_key")
                        .IsUnique();

                    b.HasIndex(new[] { "OuterUid" }, "account_outer_uid_key")
                        .IsUnique();

                    b.HasIndex(new[] { "Username" }, "account_username_key")
                        .IsUnique();

                    b.HasIndex(new[] { "Email" }, "idx_account_email");

                    b.HasIndex(new[] { "OuterUid" }, "idx_account_outer_uid");

                    b.HasIndex(new[] { "Username" }, "idx_account_username");

                    b.ToTable("account", (string)null);
                });

            modelBuilder.Entity("backend.Models.Availability", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<DateTime?>("ChangedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("changed_at");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("end_time");

                    b.Property<Guid>("GymId")
                        .HasColumnType("uuid")
                        .HasColumnName("gym_id");

                    b.Property<Guid>("MarkedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("marked_by");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("start_time");

                    b.HasKey("Id")
                        .HasName("availability_pkey");

                    b.HasIndex(new[] { "GymId", "MarkedBy" }, "availability_gym_id_marked_by_key")
                        .IsUnique();

                    b.ToTable("availability", (string)null);
                });

            modelBuilder.Entity("backend.Models.Bookmark", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<Guid>("GymId")
                        .HasColumnType("uuid")
                        .HasColumnName("gym_id");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("bookmark_pkey");

                    b.HasIndex("GymId");

                    b.HasIndex(new[] { "UserId", "GymId" }, "bookmark_user_id_gym_id_key")
                        .IsUnique();

                    b.ToTable("bookmark", (string)null);
                });

            modelBuilder.Entity("backend.Models.City", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<Guid>("CountryId")
                        .HasColumnType("uuid")
                        .HasColumnName("country_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<double>("Nelatitude")
                        .HasColumnType("double precision")
                        .HasColumnName("nelatitude");

                    b.Property<double>("Nelongitude")
                        .HasColumnType("double precision")
                        .HasColumnName("nelongitude");

                    b.Property<double>("Swlatitude")
                        .HasColumnType("double precision")
                        .HasColumnName("swlatitude");

                    b.Property<double>("Swlongitude")
                        .HasColumnType("double precision")
                        .HasColumnName("swlongitude");

                    b.HasKey("Id")
                        .HasName("city_pkey");

                    b.HasIndex("CountryId");

                    b.HasIndex(new[] { "Name", "CountryId" }, "idx_city_name_country_id");

                    b.ToTable("city", (string)null);
                });

            modelBuilder.Entity("backend.Models.CongestionRating", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<int>("AvgWaitingTime")
                        .HasColumnType("integer")
                        .HasColumnName("avg_waiting_time");

                    b.Property<DateTime?>("ChangedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("changed_at");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<int>("Crowdedness")
                        .HasColumnType("integer")
                        .HasColumnName("crowdedness");

                    b.Property<Guid>("GymId")
                        .HasColumnType("uuid")
                        .HasColumnName("gym_id");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<TimeOnly>("VisitTime")
                        .HasColumnType("time without time zone")
                        .HasColumnName("visit_time");

                    b.Property<int>("Weekday")
                        .HasColumnType("integer")
                        .HasColumnName("weekday");

                    b.HasKey("Id")
                        .HasName("congestion_rating_pkey");

                    b.HasIndex("UserId");

                    b.HasIndex(new[] { "GymId", "UserId" }, "congestion_rating_gym_id_user_id_key")
                        .IsUnique();

                    b.HasIndex(new[] { "GymId" }, "idx_congestion_rating_gym_id");

                    b.ToTable("congestion_rating", (string)null);
                });

            modelBuilder.Entity("backend.Models.Country", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(56)
                        .HasColumnType("character varying(56)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("country_pkey");

                    b.HasIndex(new[] { "Name" }, "country_name_key")
                        .IsUnique();

                    b.HasIndex(new[] { "Name" }, "idx_country_name");

                    b.ToTable("country", (string)null);
                });

            modelBuilder.Entity("backend.Models.Currency", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("character(3)")
                        .HasColumnName("code")
                        .IsFixedLength();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("currency_pkey");

                    b.HasIndex(new[] { "Code" }, "currency_code_key")
                        .IsUnique();

                    b.HasIndex(new[] { "Name" }, "currency_name_key")
                        .IsUnique();

                    b.ToTable("currency", (string)null);
                });

            modelBuilder.Entity("backend.Models.Gym", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("address");

                    b.Property<DateTime?>("ChangedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("changed_at");

                    b.Property<Guid>("CityId")
                        .HasColumnType("uuid")
                        .HasColumnName("city_id");

                    b.Property<decimal>("CongestionRating")
                        .HasPrecision(4, 2)
                        .HasColumnType("numeric(4,2)")
                        .HasColumnName("congestion_rating");

                    b.Property<int>("CongestionRatingNumber")
                        .HasColumnType("integer")
                        .HasColumnName("congestion_rating_number");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<Guid>("CurrencyId")
                        .HasColumnType("uuid")
                        .HasColumnName("currency_id");

                    b.Property<string>("ExternalPlaceId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("external_place_id");

                    b.Property<decimal>("ExternalRating")
                        .HasPrecision(4, 2)
                        .HasColumnType("numeric(4,2)")
                        .HasColumnName("external_rating");

                    b.Property<int>("ExternalRatingNumber")
                        .HasColumnType("integer")
                        .HasColumnName("external_rating_number");

                    b.Property<decimal>("InternalRating")
                        .HasPrecision(4, 2)
                        .HasColumnType("numeric(4,2)")
                        .HasColumnName("internal_rating");

                    b.Property<int>("InternalRatingNumber")
                        .HasColumnType("integer")
                        .HasColumnName("internal_rating_number");

                    b.Property<bool>("IsWheelchairAccessible")
                        .HasColumnType("boolean")
                        .HasColumnName("is_wheelchair_accessible");

                    b.Property<double>("Latitude")
                        .HasColumnType("double precision")
                        .HasColumnName("latitude");

                    b.Property<double>("Longitude")
                        .HasColumnType("double precision")
                        .HasColumnName("longitude");

                    b.Property<decimal?>("MonthlyMprice")
                        .HasPrecision(5, 2)
                        .HasColumnType("numeric(5,2)")
                        .HasColumnName("monthly_mprice");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("character varying(80)")
                        .HasColumnName("name");

                    b.Property<Guid?>("OwnedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("owned_by");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)")
                        .HasColumnName("phone_number");

                    b.Property<DateTime?>("PriceChangedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("price_changed_at");

                    b.Property<decimal?>("SixMonthsMprice")
                        .HasPrecision(5, 2)
                        .HasColumnType("numeric(5,2)")
                        .HasColumnName("six_months_mprice");

                    b.Property<string>("Website")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("website");

                    b.Property<decimal?>("YearlyMprice")
                        .HasPrecision(5, 2)
                        .HasColumnType("numeric(5,2)")
                        .HasColumnName("yearly_mprice");

                    b.HasKey("Id")
                        .HasName("gym_pkey");

                    b.HasIndex("CurrencyId");

                    b.HasIndex(new[] { "ExternalPlaceId" }, "gym_external_place_id_key")
                        .IsUnique();

                    b.HasIndex(new[] { "CityId" }, "idx_gym_city_id");

                    b.HasIndex(new[] { "ExternalPlaceId" }, "idx_gym_external_place_id");

                    b.HasIndex(new[] { "Latitude", "Longitude" }, "idx_gym_lat_lon");

                    b.HasIndex(new[] { "OwnedBy" }, "idx_gym_owned_by");

                    b.HasIndex(new[] { "PriceChangedAt" }, "idx_gym_price_changed_at");

                    b.ToTable("gym", (string)null);
                });

            modelBuilder.Entity("backend.Models.GymWorkingHour", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<DateTime?>("ChangedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("changed_at");

                    b.Property<Guid>("GymId")
                        .HasColumnType("uuid")
                        .HasColumnName("gym_id");

                    b.Property<int>("Weekday")
                        .HasColumnType("integer")
                        .HasColumnName("weekday");

                    b.Property<Guid>("WorkingHoursId")
                        .HasColumnType("uuid")
                        .HasColumnName("working_hours_id");

                    b.HasKey("Id")
                        .HasName("gym_working_hours_pkey");

                    b.HasIndex("WorkingHoursId");

                    b.HasIndex(new[] { "Weekday", "GymId", "WorkingHoursId" }, "gym_working_hours_weekday_gym_id_working_hours_id_key")
                        .IsUnique();

                    b.HasIndex(new[] { "GymId" }, "idx_gym_working_hours_gym_id");

                    b.ToTable("gym_working_hours", (string)null);
                });

            modelBuilder.Entity("backend.Models.Notification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("message");

                    b.Property<DateTime?>("ReadAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("read_at");

                    b.Property<NotificationType>("Type")
                        .HasColumnType("notification_type")
                        .HasColumnName("type");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("notification_pkey");

                    b.HasIndex(new[] { "UserId" }, "idx_notification_user_id");

                    b.ToTable("notification", (string)null);
                });

            modelBuilder.Entity("backend.Models.Ownership", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<OwnershipDecision>("Decision")
                        .HasColumnType("ownership_decision")
                        .HasColumnName("decision");

                    b.Property<Guid>("GymId")
                        .HasColumnType("uuid")
                        .HasColumnName("gym_id");

                    b.Property<string>("Message")
                        .HasColumnType("text")
                        .HasColumnName("message");

                    b.Property<DateTime>("RequestedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("requested_at")
                        .HasDefaultValueSql("now()");

                    b.Property<Guid>("RequestedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("requested_by");

                    b.Property<DateTime?>("RespondedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("responded_at");

                    b.Property<Guid?>("RespondedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("responded_by");

                    b.HasKey("Id")
                        .HasName("ownership_pkey");

                    b.HasIndex("GymId");

                    b.HasIndex("RequestedBy");

                    b.HasIndex("RespondedBy");

                    b.ToTable("ownership", (string)null);
                });

            modelBuilder.Entity("backend.Models.Rating", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<DateTime>("ChangedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("changed_at");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<Guid>("GymId")
                        .HasColumnType("uuid")
                        .HasColumnName("gym_id");

                    b.Property<int>("Rating1")
                        .HasColumnType("integer")
                        .HasColumnName("rating");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("rating_pkey");

                    b.HasIndex(new[] { "GymId" }, "idx_rating_gym_id");

                    b.HasIndex(new[] { "UserId", "GymId" }, "rating_user_id_gym_id_key")
                        .IsUnique();

                    b.ToTable("rating", (string)null);
                });

            modelBuilder.Entity("backend.Models.Recommendation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<decimal?>("CongestionScore")
                        .HasPrecision(4, 2)
                        .HasColumnType("numeric(4,2)")
                        .HasColumnName("congestion_score");

                    b.Property<Guid>("CurrencyId")
                        .HasColumnType("uuid")
                        .HasColumnName("currency_id");

                    b.Property<Guid>("GymId")
                        .HasColumnType("uuid")
                        .HasColumnName("gym_id");

                    b.Property<decimal?>("RatingScore")
                        .HasPrecision(4, 2)
                        .HasColumnType("numeric(4,2)")
                        .HasColumnName("rating_score");

                    b.Property<Guid>("RequestId")
                        .HasColumnType("uuid")
                        .HasColumnName("request_id");

                    b.Property<decimal>("Tcost")
                        .HasPrecision(4, 2)
                        .HasColumnType("numeric(4,2)")
                        .HasColumnName("tcost");

                    b.Property<decimal>("TcostScore")
                        .HasPrecision(4, 2)
                        .HasColumnType("numeric(4,2)")
                        .HasColumnName("tcost_score");

                    b.Property<TimeOnly>("Time")
                        .HasColumnType("time without time zone")
                        .HasColumnName("time");

                    b.Property<decimal>("TimeScore")
                        .HasPrecision(4, 2)
                        .HasColumnType("numeric(4,2)")
                        .HasColumnName("time_score");

                    b.Property<decimal>("TotalScore")
                        .HasPrecision(4, 2)
                        .HasColumnType("numeric(4,2)")
                        .HasColumnName("total_score");

                    b.Property<RecommendationType>("Type")
                        .HasColumnType("recommendation_type")
                        .HasColumnName("type");

                    b.HasKey("Id")
                        .HasName("recommendation_pkey");

                    b.HasIndex("CurrencyId");

                    b.HasIndex(new[] { "RequestId" }, "idx_recommendation_request_id");

                    b.HasIndex(new[] { "GymId", "RequestId" }, "recommendation_gym_id_request_id_key")
                        .IsUnique();

                    b.ToTable("recommendation", (string)null);
                });

            modelBuilder.Entity("backend.Models.Request", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<decimal>("MinCongestionRating")
                        .HasPrecision(4, 2)
                        .HasColumnType("numeric(4,2)")
                        .HasColumnName("min_congestion_rating");

                    b.Property<int>("MinMembershipPrice")
                        .HasColumnType("integer")
                        .HasColumnName("min_membership_price");

                    b.Property<decimal>("MinRating")
                        .HasPrecision(4, 2)
                        .HasColumnType("numeric(4,2)")
                        .HasColumnName("min_rating");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<double>("OriginLatitude")
                        .HasColumnType("double precision")
                        .HasColumnName("origin_latitude");

                    b.Property<double>("OriginLongitude")
                        .HasColumnType("double precision")
                        .HasColumnName("origin_longitude");

                    b.Property<DateTime>("RequestedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("requested_at")
                        .HasDefaultValueSql("now()");

                    b.Property<int>("TimePriority")
                        .HasColumnType("integer")
                        .HasColumnName("time_priority");

                    b.Property<int>("TotalCostPriority")
                        .HasColumnType("integer")
                        .HasColumnName("total_cost_priority");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("request_pkey");

                    b.HasIndex(new[] { "Name" }, "idx_request_name");

                    b.HasIndex(new[] { "UserId" }, "idx_request_user_id");

                    b.HasIndex(new[] { "UserId", "Name" }, "request_user_id_name_key")
                        .IsUnique();

                    b.HasIndex(new[] { "UserId", "RequestedAt" }, "request_user_id_requested_at_key")
                        .IsUnique();

                    b.ToTable("request", (string)null);
                });

            modelBuilder.Entity("backend.Models.RequestPause", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<byte[]>("Ip")
                        .HasColumnType("bytea")
                        .HasColumnName("ip");

                    b.Property<DateTime>("StartedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("started_at")
                        .HasDefaultValueSql("now()");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("request_pause_pkey");

                    b.HasIndex(new[] { "Ip" }, "idx_request_pause_ip");

                    b.HasIndex(new[] { "UserId" }, "idx_request_pause_user_id");

                    b.HasIndex(new[] { "Ip" }, "request_pause_ip_key")
                        .IsUnique();

                    b.HasIndex(new[] { "UserId" }, "request_pause_user_id_key")
                        .IsUnique();

                    b.ToTable("request_pause", (string)null);
                });

            modelBuilder.Entity("backend.Models.RequestPeriod", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<TimeOnly?>("ArrivalTime")
                        .HasColumnType("time without time zone")
                        .HasColumnName("arrival_time");

                    b.Property<TimeOnly?>("DepartureTime")
                        .HasColumnType("time without time zone")
                        .HasColumnName("departure_time");

                    b.Property<Guid>("RequestId")
                        .HasColumnType("uuid")
                        .HasColumnName("request_id");

                    b.Property<int>("Weekday")
                        .HasColumnType("integer")
                        .HasColumnName("weekday");

                    b.HasKey("Id")
                        .HasName("request_period_pkey");

                    b.HasIndex(new[] { "RequestId" }, "idx_request_period_request_id");

                    b.HasIndex(new[] { "RequestId", "Weekday" }, "request_period_request_id_weekday_key")
                        .IsUnique();

                    b.ToTable("request_period", (string)null);
                });

            modelBuilder.Entity("backend.Models.UserToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("ExpiresAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expires_at");

                    b.Property<string>("OuterToken")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("outer_token");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("now()");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("user_token_pkey");

                    b.HasIndex(new[] { "UserId" }, "idx_user_token_user_id");

                    b.HasIndex(new[] { "OuterToken" }, "user_token_outer_token_key")
                        .IsUnique();

                    b.HasIndex(new[] { "UserId" }, "user_token_user_id_key")
                        .IsUnique();

                    b.ToTable("user_token", (string)null);
                });

            modelBuilder.Entity("backend.Models.WorkingHour", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<TimeOnly>("OpenFrom")
                        .HasColumnType("time without time zone")
                        .HasColumnName("open_from");

                    b.Property<TimeOnly>("OpenUntil")
                        .HasColumnType("time without time zone")
                        .HasColumnName("open_until");

                    b.HasKey("Id")
                        .HasName("working_hours_pkey");

                    b.HasIndex(new[] { "OpenFrom", "OpenUntil" }, "working_hours_open_from_open_until_key")
                        .IsUnique();

                    b.ToTable("working_hours", (string)null);
                });

            modelBuilder.Entity("backend.Models.Account", b =>
                {
                    b.HasOne("backend.Models.Account", "CreatedByNavigation")
                        .WithMany("InverseCreatedByNavigation")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_created_by_fkey");

                    b.Navigation("CreatedByNavigation");
                });

            modelBuilder.Entity("backend.Models.Bookmark", b =>
                {
                    b.HasOne("backend.Models.Gym", "Gym")
                        .WithMany("Bookmarks")
                        .HasForeignKey("GymId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("bookmark_gym_id_fkey");

                    b.HasOne("backend.Models.Account", "User")
                        .WithMany("Bookmarks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("bookmark_user_id_fkey");

                    b.Navigation("Gym");

                    b.Navigation("User");
                });

            modelBuilder.Entity("backend.Models.City", b =>
                {
                    b.HasOne("backend.Models.Country", "Country")
                        .WithMany("Cities")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("city_country_id_fkey");

                    b.Navigation("Country");
                });

            modelBuilder.Entity("backend.Models.CongestionRating", b =>
                {
                    b.HasOne("backend.Models.Gym", "Gym")
                        .WithMany("CongestionRatings")
                        .HasForeignKey("GymId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("congestion_rating_gym_id_fkey");

                    b.HasOne("backend.Models.Account", "User")
                        .WithMany("CongestionRatings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("congestion_rating_user_id_fkey");

                    b.Navigation("Gym");

                    b.Navigation("User");
                });

            modelBuilder.Entity("backend.Models.Gym", b =>
                {
                    b.HasOne("backend.Models.City", "City")
                        .WithMany("Gyms")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("gym_city_id_fkey");

                    b.HasOne("backend.Models.Currency", "Currency")
                        .WithMany("Gyms")
                        .HasForeignKey("CurrencyId")
                        .IsRequired()
                        .HasConstraintName("gym_currency_id_fkey");

                    b.HasOne("backend.Models.Account", "OwnedByNavigation")
                        .WithMany("Gyms")
                        .HasForeignKey("OwnedBy")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("gym_owned_by_fkey");

                    b.Navigation("City");

                    b.Navigation("Currency");

                    b.Navigation("OwnedByNavigation");
                });

            modelBuilder.Entity("backend.Models.GymWorkingHour", b =>
                {
                    b.HasOne("backend.Models.Gym", "Gym")
                        .WithMany("GymWorkingHours")
                        .HasForeignKey("GymId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("gym_working_hours_gym_id_fkey");

                    b.HasOne("backend.Models.WorkingHour", "WorkingHours")
                        .WithMany("GymWorkingHours")
                        .HasForeignKey("WorkingHoursId")
                        .IsRequired()
                        .HasConstraintName("gym_working_hours_working_hours_id_fkey");

                    b.Navigation("Gym");

                    b.Navigation("WorkingHours");
                });

            modelBuilder.Entity("backend.Models.Notification", b =>
                {
                    b.HasOne("backend.Models.Account", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("notification_user_id_fkey");

                    b.Navigation("User");
                });

            modelBuilder.Entity("backend.Models.Ownership", b =>
                {
                    b.HasOne("backend.Models.Gym", "Gym")
                        .WithMany("Ownerships")
                        .HasForeignKey("GymId")
                        .IsRequired()
                        .HasConstraintName("ownership_gym_id_fkey");

                    b.HasOne("backend.Models.Account", "RequestedByNavigation")
                        .WithMany("OwnershipRequestedByNavigations")
                        .HasForeignKey("RequestedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("ownership_requested_by_fkey");

                    b.HasOne("backend.Models.Account", "RespondedByNavigation")
                        .WithMany("OwnershipRespondedByNavigations")
                        .HasForeignKey("RespondedBy")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("ownership_responded_by_fkey");

                    b.Navigation("Gym");

                    b.Navigation("RequestedByNavigation");

                    b.Navigation("RespondedByNavigation");
                });

            modelBuilder.Entity("backend.Models.Rating", b =>
                {
                    b.HasOne("backend.Models.Gym", "Gym")
                        .WithMany("Ratings")
                        .HasForeignKey("GymId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("rating_gym_id_fkey");

                    b.HasOne("backend.Models.Account", "User")
                        .WithMany("Ratings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("rating_user_id_fkey");

                    b.Navigation("Gym");

                    b.Navigation("User");
                });

            modelBuilder.Entity("backend.Models.Recommendation", b =>
                {
                    b.HasOne("backend.Models.Currency", "Currency")
                        .WithMany("Recommendations")
                        .HasForeignKey("CurrencyId")
                        .IsRequired()
                        .HasConstraintName("recommendation_currency_id_fkey");

                    b.HasOne("backend.Models.Gym", "Gym")
                        .WithMany("Recommendations")
                        .HasForeignKey("GymId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("recommendation_gym_id_fkey");

                    b.HasOne("backend.Models.Request", "Request")
                        .WithMany("Recommendations")
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("recommendation_request_id_fkey");

                    b.Navigation("Currency");

                    b.Navigation("Gym");

                    b.Navigation("Request");
                });

            modelBuilder.Entity("backend.Models.Request", b =>
                {
                    b.HasOne("backend.Models.Account", "User")
                        .WithMany("Requests")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("request_user_id_fkey");

                    b.Navigation("User");
                });

            modelBuilder.Entity("backend.Models.RequestPause", b =>
                {
                    b.HasOne("backend.Models.Account", "User")
                        .WithOne("RequestPause")
                        .HasForeignKey("backend.Models.RequestPause", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("request_pause_user_id_fkey");

                    b.Navigation("User");
                });

            modelBuilder.Entity("backend.Models.RequestPeriod", b =>
                {
                    b.HasOne("backend.Models.Request", "Request")
                        .WithMany("RequestPeriods")
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("request_period_request_id_fkey");

                    b.Navigation("Request");
                });

            modelBuilder.Entity("backend.Models.UserToken", b =>
                {
                    b.HasOne("backend.Models.Account", "User")
                        .WithOne("UserToken")
                        .HasForeignKey("backend.Models.UserToken", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("user_token_user_id_fkey");

                    b.Navigation("User");
                });

            modelBuilder.Entity("backend.Models.Account", b =>
                {
                    b.Navigation("Bookmarks");

                    b.Navigation("CongestionRatings");

                    b.Navigation("Gyms");

                    b.Navigation("InverseCreatedByNavigation");

                    b.Navigation("Notifications");

                    b.Navigation("OwnershipRequestedByNavigations");

                    b.Navigation("OwnershipRespondedByNavigations");

                    b.Navigation("Ratings");

                    b.Navigation("RequestPause");

                    b.Navigation("Requests");

                    b.Navigation("UserToken");
                });

            modelBuilder.Entity("backend.Models.City", b =>
                {
                    b.Navigation("Gyms");
                });

            modelBuilder.Entity("backend.Models.Country", b =>
                {
                    b.Navigation("Cities");
                });

            modelBuilder.Entity("backend.Models.Currency", b =>
                {
                    b.Navigation("Gyms");

                    b.Navigation("Recommendations");
                });

            modelBuilder.Entity("backend.Models.Gym", b =>
                {
                    b.Navigation("Bookmarks");

                    b.Navigation("CongestionRatings");

                    b.Navigation("GymWorkingHours");

                    b.Navigation("Ownerships");

                    b.Navigation("Ratings");

                    b.Navigation("Recommendations");
                });

            modelBuilder.Entity("backend.Models.Request", b =>
                {
                    b.Navigation("Recommendations");

                    b.Navigation("RequestPeriods");
                });

            modelBuilder.Entity("backend.Models.WorkingHour", b =>
                {
                    b.Navigation("GymWorkingHours");
                });
#pragma warning restore 612, 618
        }
    }
}
